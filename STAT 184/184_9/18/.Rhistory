OreoData1 <- read.csv("C:/Users/hanzi/Downloads/OreoData1.csv")
View(OreoData1)
load(file="/Users/hanzi/Downloads/OreoData1.csv")
load(file="/Users/hanzi/Downloads/OreoDataSets.RData")
install.packages("devtools")
install_github("mdbeckman/deData")
data(BabyNames)
load(file="C:\Users\hanzi\Downloads\oreoDataSets.RData")
load(file="C:\Users\hanzi\Downloads\oreoDataSets.RData")
load(file="C:\Users\hanzi\Downloads\oreoDataSets.RData")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
cat("Maximum volume of the box:", result$max_volume, "cubic inches\n")
# Dimensions of the paper
length <- 11       # Length of the paper in inches
# Plot the volume function
plot(x_values, volume_values, type = "l", col = "blue", lwd = 2,
xlab = "Side length of cutout square (inches)",
ylab = "Volume of the box (cubic inches)",
main = "Volume of the Open-Top Box as a Function of Cutout Size")
# Plot the volume function
plot(x_values, volume_values, type = "l", col = "blue", lwd = 2,
xlab = "Side length of cutout square (inches)",
ylab = "Volume of the box (cubic inches)",
main = "Volume of the Open-Top Box as a Function of Cutout Size")
# Plot the volume function
plot(x_values, volume_values, type = "l", col = "blue", lwd = 2,
xlab = "Side length of cutout square (inches)",
ylab = "Volume of the box (cubic inches)",
main = "Volume of the Open-Top Box as a Function of Cutout Size")
width <- 8.5       # Width of the paper in inches
box_length <- length - 2 * x   # New length after cutting out squares
box_length <- length - 2 * x   # New length after cutting out squares
box_length <- length - 2 * x # New length after cutting out squares
box_height <- x
box_height <- x
box_length <- length - 2 * x
# Calculating the dimensions of the box after cutting out squares of side length x
box_length <- length - 2 * x # New length after cutting out squares
# Return the volume of the box (Length * Width * Height)
return(box_length * box_width * box_height)
hist(stopping_times, breaks = 50, col = "blue",
main = "Distribution of Stopping Times for the First 10,000 Integers",
xlab = "Stopping Time", ylab = "Frequency")
stopping_time <- stopping_time + 1
stopping_time <- 0
while (n > 1) {
if (n %% 2 == 0) {
n <- n / 2
} else {
n <- 3 * n + 1
}
CollatzStoppingTime <- function(n) {
stopping_time <- 0
while (n > 1) {
if (n %% 2 == 0) {
n <- n / 2
} else {
n <- 3 * n + 1
}
stopping_time <- stopping_time + 1
}
return(stopping_time)
}
ComputeStoppingTimes <- function(limit = 10000) {
stopping_times <- numeric(limit)
for (i in 1:limit) {
stopping_times[i] <- CollatzStoppingTime(i)
}
return(stopping_times)
}
stopping_times <- ComputeStoppingTimes()
hist(stopping_times, breaks = 50, col = "blue",
main = "Distribution of Stopping Times for the First 10,000 Integers",
xlab = "Stopping Time", ylab = "Frequency")
hist(stopping_times, breaks = 50, col = "blue",
main = "Distribution of Stopping Times for the First 10,000 Integers",
xlab = "Stopping Time", ylab = "Frequency")
hist(stopping_times, breaks = 50, col = "blue",
main = "Distribution of Stopping Times for the First 10,000 Integers",
xlab = "Stopping Time", ylab = "Frequency")
hist(stopping_times, breaks = 50, col = "blue",
main = "Distribution of Stopping Times for the First 10,000 Integers",
xlab = "Stopping Time", ylab = "Frequency")
stopping_times <- numeric(limit)
CollatzStoppingTime(18)    # Stopping time for 18
CollatzStoppingTimeVec <- Vectorize(CollatzStoppingTime)
CollatzStoppingTimeVec <- Vectorize(CollatzStoppingTime)
install.packages("devtools")
load(file="C:\Users\hanzi\Downloads\oreoDataSets.RData")
orepData<-read.table(
file="https://raw.github.com/neilhatfield/STAT461/main/dataFiles/classDemoOreo.dat",
header=TRUE,
sep=","
)
str(oreaData)
orepData<-read.table(
file="https://raw.github.com/neilhatfield/STAT461/main/dataFiles/classDemoOreo.dat",
header=TRUE,
sep=","
)
str(oreaData)
str(oreoData)
oreoData<-read.table(
file="https://raw.github.com/neilhatfield/STAT461/main/dataFiles/classDemoOreo.dat",
header=TRUE,
sep=","
)
str(oreoData)
View(oreoData)
oreoData$Filling.Mass
oreoData$Type
oreoData$Filling.Mass[4]
oreoData[1:3,2]
oreoData[,2]
